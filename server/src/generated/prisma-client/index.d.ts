// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  character: (where?: CharacterWhereInput) => Promise<boolean>;
  game: (where?: GameWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  character: (where: CharacterWhereUniqueInput) => CharacterNullablePromise;
  characters: (args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Character>;
  charactersConnection: (args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CharacterConnectionPromise;
  game: (where: GameWhereUniqueInput) => GameNullablePromise;
  games: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Game>;
  gamesConnection: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GameConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCharacter: (data: CharacterCreateInput) => CharacterPromise;
  updateCharacter: (args: {
    data: CharacterUpdateInput;
    where: CharacterWhereUniqueInput;
  }) => CharacterPromise;
  updateManyCharacters: (args: {
    data: CharacterUpdateManyMutationInput;
    where?: CharacterWhereInput;
  }) => BatchPayloadPromise;
  upsertCharacter: (args: {
    where: CharacterWhereUniqueInput;
    create: CharacterCreateInput;
    update: CharacterUpdateInput;
  }) => CharacterPromise;
  deleteCharacter: (where: CharacterWhereUniqueInput) => CharacterPromise;
  deleteManyCharacters: (where?: CharacterWhereInput) => BatchPayloadPromise;
  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (args: {
    data: GameUpdateInput;
    where: GameWhereUniqueInput;
  }) => GamePromise;
  updateManyGames: (args: {
    data: GameUpdateManyMutationInput;
    where?: GameWhereInput;
  }) => BatchPayloadPromise;
  upsertGame: (args: {
    where: GameWhereUniqueInput;
    create: GameCreateInput;
    update: GameUpdateInput;
  }) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  character: (
    where?: CharacterSubscriptionWhereInput
  ) => CharacterSubscriptionPayloadSubscription;
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Status = "DRAFT" | "PUBLISHED" | "ARCHIVED";

export type CharacterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isNonPlayable_ASC"
  | "isNonPlayable_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserRole = "Admin" | "Player" | "GameMaster";

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "lastGameAt_ASC"
  | "lastGameAt_DESC"
  | "status_ASC"
  | "status_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GameUpdateWithoutGameMasterDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  players?: Maybe<UserUpdateManyWithoutPlayInput>;
  characters?: Maybe<CharacterUpdateManyWithoutGamesInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export type CharacterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CharacterCreateManyWithoutGamesInput {
  create?: Maybe<
    CharacterCreateWithoutGamesInput[] | CharacterCreateWithoutGamesInput
  >;
  connect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
}

export interface CharacterUpsertWithWhereUniqueWithoutPlayerInput {
  where: CharacterWhereUniqueInput;
  update: CharacterUpdateWithoutPlayerDataInput;
  create: CharacterCreateWithoutPlayerInput;
}

export interface CharacterCreateWithoutGamesInput {
  id?: Maybe<ID_Input>;
  name: String;
  player: UserCreateOneWithoutCharactersInput;
  isNonPlayable?: Maybe<Boolean>;
  status?: Maybe<Status>;
}

export interface CharacterUpdateManyWithoutPlayerInput {
  create?: Maybe<
    CharacterCreateWithoutPlayerInput[] | CharacterCreateWithoutPlayerInput
  >;
  delete?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  connect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  set?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  disconnect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  update?: Maybe<
    | CharacterUpdateWithWhereUniqueWithoutPlayerInput[]
    | CharacterUpdateWithWhereUniqueWithoutPlayerInput
  >;
  upsert?: Maybe<
    | CharacterUpsertWithWhereUniqueWithoutPlayerInput[]
    | CharacterUpsertWithWhereUniqueWithoutPlayerInput
  >;
  deleteMany?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  updateMany?: Maybe<
    | CharacterUpdateManyWithWhereNestedInput[]
    | CharacterUpdateManyWithWhereNestedInput
  >;
}

export interface CharacterUpdateInput {
  name?: Maybe<String>;
  player?: Maybe<UserUpdateOneRequiredWithoutCharactersInput>;
  isNonPlayable?: Maybe<Boolean>;
  status?: Maybe<Status>;
  games?: Maybe<GameUpdateManyWithoutCharactersInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  characters_every?: Maybe<CharacterWhereInput>;
  characters_some?: Maybe<CharacterWhereInput>;
  characters_none?: Maybe<CharacterWhereInput>;
  manage_every?: Maybe<GameWhereInput>;
  manage_some?: Maybe<GameWhereInput>;
  manage_none?: Maybe<GameWhereInput>;
  play_every?: Maybe<GameWhereInput>;
  play_some?: Maybe<GameWhereInput>;
  play_none?: Maybe<GameWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateOneRequiredWithoutCharactersInput {
  create?: Maybe<UserCreateWithoutCharactersInput>;
  update?: Maybe<UserUpdateWithoutCharactersDataInput>;
  upsert?: Maybe<UserUpsertWithoutCharactersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CharacterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  player?: Maybe<UserWhereInput>;
  isNonPlayable?: Maybe<Boolean>;
  isNonPlayable_not?: Maybe<Boolean>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  games_every?: Maybe<GameWhereInput>;
  games_some?: Maybe<GameWhereInput>;
  games_none?: Maybe<GameWhereInput>;
  AND?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
  OR?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
  NOT?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
}

export interface UserUpdateWithoutCharactersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
  manage?: Maybe<GameUpdateManyWithoutGameMasterInput>;
  play?: Maybe<GameUpdateManyWithoutPlayersInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
}

export interface UserUpdateroleInput {
  set?: Maybe<UserRole[] | UserRole>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  characters?: Maybe<CharacterCreateManyWithoutPlayerInput>;
  role?: Maybe<UserCreateroleInput>;
  manage?: Maybe<GameCreateManyWithoutGameMasterInput>;
  play?: Maybe<GameCreateManyWithoutPlayersInput>;
}

export interface GameUpdateManyWithoutGameMasterInput {
  create?: Maybe<
    GameCreateWithoutGameMasterInput[] | GameCreateWithoutGameMasterInput
  >;
  delete?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  set?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  disconnect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  update?: Maybe<
    | GameUpdateWithWhereUniqueWithoutGameMasterInput[]
    | GameUpdateWithWhereUniqueWithoutGameMasterInput
  >;
  upsert?: Maybe<
    | GameUpsertWithWhereUniqueWithoutGameMasterInput[]
    | GameUpsertWithWhereUniqueWithoutGameMasterInput
  >;
  deleteMany?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  updateMany?: Maybe<
    GameUpdateManyWithWhereNestedInput[] | GameUpdateManyWithWhereNestedInput
  >;
}

export interface GameUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  gameMaster?: Maybe<UserUpdateOneRequiredWithoutManageInput>;
  players?: Maybe<UserUpdateManyWithoutPlayInput>;
  characters?: Maybe<CharacterUpdateManyWithoutGamesInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export interface GameUpdateWithWhereUniqueWithoutGameMasterInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutGameMasterDataInput;
}

export type GameWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  title?: Maybe<String>;
}>;

export interface UserUpsertWithWhereUniqueWithoutPlayInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutPlayDataInput;
  create: UserCreateWithoutPlayInput;
}

export interface UserUpsertWithoutCharactersInput {
  update: UserUpdateWithoutCharactersDataInput;
  create: UserCreateWithoutCharactersInput;
}

export interface UserUpdateManyWithoutPlayInput {
  create?: Maybe<UserCreateWithoutPlayInput[] | UserCreateWithoutPlayInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutPlayInput[]
    | UserUpdateWithWhereUniqueWithoutPlayInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutPlayInput[]
    | UserUpsertWithWhereUniqueWithoutPlayInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateWithWhereUniqueWithoutPlayInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPlayDataInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateWithoutPlayDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  characters?: Maybe<CharacterUpdateManyWithoutPlayerInput>;
  role?: Maybe<UserUpdateroleInput>;
  manage?: Maybe<GameUpdateManyWithoutGameMasterInput>;
}

export interface UserCreateOneWithoutCharactersInput {
  create?: Maybe<UserCreateWithoutCharactersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GameWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  gameMaster?: Maybe<UserWhereInput>;
  players_every?: Maybe<UserWhereInput>;
  players_some?: Maybe<UserWhereInput>;
  players_none?: Maybe<UserWhereInput>;
  characters_every?: Maybe<CharacterWhereInput>;
  characters_some?: Maybe<CharacterWhereInput>;
  characters_none?: Maybe<CharacterWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  lastGameAt_not?: Maybe<DateTimeInput>;
  lastGameAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastGameAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastGameAt_lt?: Maybe<DateTimeInput>;
  lastGameAt_lte?: Maybe<DateTimeInput>;
  lastGameAt_gt?: Maybe<DateTimeInput>;
  lastGameAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  AND?: Maybe<GameWhereInput[] | GameWhereInput>;
  OR?: Maybe<GameWhereInput[] | GameWhereInput>;
  NOT?: Maybe<GameWhereInput[] | GameWhereInput>;
}

export interface UserCreateroleInput {
  set?: Maybe<UserRole[] | UserRole>;
}

export interface CharacterUpdateWithWhereUniqueWithoutPlayerInput {
  where: CharacterWhereUniqueInput;
  data: CharacterUpdateWithoutPlayerDataInput;
}

export interface GameCreateWithoutGameMasterInput {
  id?: Maybe<ID_Input>;
  title: String;
  description?: Maybe<String>;
  players?: Maybe<UserCreateManyWithoutPlayInput>;
  characters?: Maybe<CharacterCreateManyWithoutGamesInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export interface CharacterUpdateWithoutPlayerDataInput {
  name?: Maybe<String>;
  isNonPlayable?: Maybe<Boolean>;
  status?: Maybe<Status>;
  games?: Maybe<GameUpdateManyWithoutCharactersInput>;
}

export interface UserCreateWithoutPlayInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  characters?: Maybe<CharacterCreateManyWithoutPlayerInput>;
  role?: Maybe<UserCreateroleInput>;
  manage?: Maybe<GameCreateManyWithoutGameMasterInput>;
}

export interface GameUpdateManyWithoutCharactersInput {
  create?: Maybe<
    GameCreateWithoutCharactersInput[] | GameCreateWithoutCharactersInput
  >;
  delete?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  set?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  disconnect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  update?: Maybe<
    | GameUpdateWithWhereUniqueWithoutCharactersInput[]
    | GameUpdateWithWhereUniqueWithoutCharactersInput
  >;
  upsert?: Maybe<
    | GameUpsertWithWhereUniqueWithoutCharactersInput[]
    | GameUpsertWithWhereUniqueWithoutCharactersInput
  >;
  deleteMany?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  updateMany?: Maybe<
    GameUpdateManyWithWhereNestedInput[] | GameUpdateManyWithWhereNestedInput
  >;
}

export interface CharacterCreateWithoutPlayerInput {
  id?: Maybe<ID_Input>;
  name: String;
  isNonPlayable?: Maybe<Boolean>;
  status?: Maybe<Status>;
  games?: Maybe<GameCreateManyWithoutCharactersInput>;
}

export interface GameUpdateWithWhereUniqueWithoutCharactersInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutCharactersDataInput;
}

export interface GameCreateWithoutCharactersInput {
  id?: Maybe<ID_Input>;
  title: String;
  description?: Maybe<String>;
  gameMaster: UserCreateOneWithoutManageInput;
  players?: Maybe<UserCreateManyWithoutPlayInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export interface GameUpdateWithoutCharactersDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  gameMaster?: Maybe<UserUpdateOneRequiredWithoutManageInput>;
  players?: Maybe<UserUpdateManyWithoutPlayInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export interface UserCreateWithoutManageInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  characters?: Maybe<CharacterCreateManyWithoutPlayerInput>;
  role?: Maybe<UserCreateroleInput>;
  play?: Maybe<GameCreateManyWithoutPlayersInput>;
}

export interface UserUpdateOneRequiredWithoutManageInput {
  create?: Maybe<UserCreateWithoutManageInput>;
  update?: Maybe<UserUpdateWithoutManageDataInput>;
  upsert?: Maybe<UserUpsertWithoutManageInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GameCreateWithoutPlayersInput {
  id?: Maybe<ID_Input>;
  title: String;
  description?: Maybe<String>;
  gameMaster: UserCreateOneWithoutManageInput;
  characters?: Maybe<CharacterCreateManyWithoutGamesInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export interface UserUpdateWithoutManageDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  characters?: Maybe<CharacterUpdateManyWithoutPlayerInput>;
  role?: Maybe<UserUpdateroleInput>;
  play?: Maybe<GameUpdateManyWithoutPlayersInput>;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GameWhereInput>;
  AND?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  OR?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  NOT?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
}

export interface GameUpdateManyWithoutPlayersInput {
  create?: Maybe<
    GameCreateWithoutPlayersInput[] | GameCreateWithoutPlayersInput
  >;
  delete?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  set?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  disconnect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  update?: Maybe<
    | GameUpdateWithWhereUniqueWithoutPlayersInput[]
    | GameUpdateWithWhereUniqueWithoutPlayersInput
  >;
  upsert?: Maybe<
    | GameUpsertWithWhereUniqueWithoutPlayersInput[]
    | GameUpsertWithWhereUniqueWithoutPlayersInput
  >;
  deleteMany?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  updateMany?: Maybe<
    GameUpdateManyWithWhereNestedInput[] | GameUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  characters?: Maybe<CharacterUpdateManyWithoutPlayerInput>;
  role?: Maybe<UserUpdateroleInput>;
  manage?: Maybe<GameUpdateManyWithoutGameMasterInput>;
  play?: Maybe<GameUpdateManyWithoutPlayersInput>;
}

export interface GameUpdateWithWhereUniqueWithoutPlayersInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutPlayersDataInput;
}

export interface GameCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description?: Maybe<String>;
  gameMaster: UserCreateOneWithoutManageInput;
  players?: Maybe<UserCreateManyWithoutPlayInput>;
  characters?: Maybe<CharacterCreateManyWithoutGamesInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export interface GameUpdateWithoutPlayersDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  gameMaster?: Maybe<UserUpdateOneRequiredWithoutManageInput>;
  characters?: Maybe<CharacterUpdateManyWithoutGamesInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export interface GameUpsertWithWhereUniqueWithoutGameMasterInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutGameMasterDataInput;
  create: GameCreateWithoutGameMasterInput;
}

export interface CharacterUpdateManyWithoutGamesInput {
  create?: Maybe<
    CharacterCreateWithoutGamesInput[] | CharacterCreateWithoutGamesInput
  >;
  delete?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  connect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  set?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  disconnect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  update?: Maybe<
    | CharacterUpdateWithWhereUniqueWithoutGamesInput[]
    | CharacterUpdateWithWhereUniqueWithoutGamesInput
  >;
  upsert?: Maybe<
    | CharacterUpsertWithWhereUniqueWithoutGamesInput[]
    | CharacterUpsertWithWhereUniqueWithoutGamesInput
  >;
  deleteMany?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  updateMany?: Maybe<
    | CharacterUpdateManyWithWhereNestedInput[]
    | CharacterUpdateManyWithWhereNestedInput
  >;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface CharacterUpdateWithWhereUniqueWithoutGamesInput {
  where: CharacterWhereUniqueInput;
  data: CharacterUpdateWithoutGamesDataInput;
}

export interface UserCreateWithoutCharactersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  role?: Maybe<UserCreateroleInput>;
  manage?: Maybe<GameCreateManyWithoutGameMasterInput>;
  play?: Maybe<GameCreateManyWithoutPlayersInput>;
}

export interface CharacterUpdateWithoutGamesDataInput {
  name?: Maybe<String>;
  player?: Maybe<UserUpdateOneRequiredWithoutCharactersInput>;
  isNonPlayable?: Maybe<Boolean>;
  status?: Maybe<Status>;
}

export interface UserCreateManyWithoutPlayInput {
  create?: Maybe<UserCreateWithoutPlayInput[] | UserCreateWithoutPlayInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface CharacterUpsertWithWhereUniqueWithoutGamesInput {
  where: CharacterWhereUniqueInput;
  update: CharacterUpdateWithoutGamesDataInput;
  create: CharacterCreateWithoutGamesInput;
}

export interface GameCreateManyWithoutCharactersInput {
  create?: Maybe<
    GameCreateWithoutCharactersInput[] | GameCreateWithoutCharactersInput
  >;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
}

export interface CharacterScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  isNonPlayable?: Maybe<Boolean>;
  isNonPlayable_not?: Maybe<Boolean>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  OR?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  NOT?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
}

export interface GameCreateManyWithoutPlayersInput {
  create?: Maybe<
    GameCreateWithoutPlayersInput[] | GameCreateWithoutPlayersInput
  >;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
}

export interface CharacterUpdateManyWithWhereNestedInput {
  where: CharacterScalarWhereInput;
  data: CharacterUpdateManyDataInput;
}

export interface CharacterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CharacterWhereInput>;
  AND?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
  OR?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
}

export interface CharacterUpdateManyDataInput {
  name?: Maybe<String>;
  isNonPlayable?: Maybe<Boolean>;
  status?: Maybe<Status>;
}

export interface CharacterUpdateManyMutationInput {
  name?: Maybe<String>;
  isNonPlayable?: Maybe<Boolean>;
  status?: Maybe<Status>;
}

export interface GameUpsertWithWhereUniqueWithoutPlayersInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutPlayersDataInput;
  create: GameCreateWithoutPlayersInput;
}

export interface CharacterCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  player: UserCreateOneWithoutCharactersInput;
  isNonPlayable?: Maybe<Boolean>;
  status?: Maybe<Status>;
  games?: Maybe<GameCreateManyWithoutCharactersInput>;
}

export interface GameScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  lastGameAt?: Maybe<DateTimeInput>;
  lastGameAt_not?: Maybe<DateTimeInput>;
  lastGameAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastGameAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastGameAt_lt?: Maybe<DateTimeInput>;
  lastGameAt_lte?: Maybe<DateTimeInput>;
  lastGameAt_gt?: Maybe<DateTimeInput>;
  lastGameAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  AND?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  OR?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  NOT?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
}

export interface CharacterCreateManyWithoutPlayerInput {
  create?: Maybe<
    CharacterCreateWithoutPlayerInput[] | CharacterCreateWithoutPlayerInput
  >;
  connect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
}

export interface GameUpsertWithWhereUniqueWithoutCharactersInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutCharactersDataInput;
  create: GameCreateWithoutCharactersInput;
}

export interface UserUpsertWithoutManageInput {
  update: UserUpdateWithoutManageDataInput;
  create: UserCreateWithoutManageInput;
}

export interface GameUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface UserCreateOneWithoutManageInput {
  create?: Maybe<UserCreateWithoutManageInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GameCreateManyWithoutGameMasterInput {
  create?: Maybe<
    GameCreateWithoutGameMasterInput[] | GameCreateWithoutGameMasterInput
  >;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
}

export interface GameUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  lastGameAt?: Maybe<DateTimeInput>;
  status?: Maybe<Status>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  role: UserRole[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole[]>>;
}

export interface CharacterEdge {
  node: Character;
  cursor: String;
}

export interface CharacterEdgePromise
  extends Promise<CharacterEdge>,
    Fragmentable {
  node: <T = CharacterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CharacterEdgeSubscription
  extends Promise<AsyncIterator<CharacterEdge>>,
    Fragmentable {
  node: <T = CharacterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CharacterConnection {
  pageInfo: PageInfo;
  edges: CharacterEdge[];
}

export interface CharacterConnectionPromise
  extends Promise<CharacterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CharacterEdge>>() => T;
  aggregate: <T = AggregateCharacterPromise>() => T;
}

export interface CharacterConnectionSubscription
  extends Promise<AsyncIterator<CharacterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CharacterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCharacterSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface GamePreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  lastGameAt?: DateTimeOutput;
  status: Status;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  lastGameAt: () => Promise<DateTimeOutput>;
  status: () => Promise<Status>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastGameAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Status>>;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Game {
  id: ID_Output;
  title: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  lastGameAt?: DateTimeOutput;
  status: Status;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  gameMaster: <T = UserPromise>() => T;
  players: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  characters: <T = FragmentableArray<Character>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  lastGameAt: () => Promise<DateTimeOutput>;
  status: () => Promise<Status>;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  gameMaster: <T = UserSubscription>() => T;
  players: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  characters: <T = Promise<AsyncIterator<CharacterSubscription>>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastGameAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Status>>;
}

export interface GameNullablePromise
  extends Promise<Game | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  gameMaster: <T = UserPromise>() => T;
  players: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  characters: <T = FragmentableArray<Character>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  lastGameAt: () => Promise<DateTimeOutput>;
  status: () => Promise<Status>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateCharacter {
  count: Int;
}

export interface AggregateCharacterPromise
  extends Promise<AggregateCharacter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCharacterSubscription
  extends Promise<AsyncIterator<AggregateCharacter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CharacterPreviousValues {
  id: ID_Output;
  name: String;
  isNonPlayable: Boolean;
  status: Status;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CharacterPreviousValuesPromise
  extends Promise<CharacterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isNonPlayable: () => Promise<Boolean>;
  status: () => Promise<Status>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CharacterPreviousValuesSubscription
  extends Promise<AsyncIterator<CharacterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  isNonPlayable: () => Promise<AsyncIterator<Boolean>>;
  status: () => Promise<AsyncIterator<Status>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CharacterSubscriptionPayload {
  mutation: MutationType;
  node: Character;
  updatedFields: String[];
  previousValues: CharacterPreviousValues;
}

export interface CharacterSubscriptionPayloadPromise
  extends Promise<CharacterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CharacterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CharacterPreviousValuesPromise>() => T;
}

export interface CharacterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CharacterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CharacterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CharacterPreviousValuesSubscription>() => T;
}

export interface Character {
  id: ID_Output;
  name: String;
  isNonPlayable: Boolean;
  status: Status;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CharacterPromise extends Promise<Character>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  player: <T = UserPromise>() => T;
  isNonPlayable: () => Promise<Boolean>;
  status: () => Promise<Status>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CharacterSubscription
  extends Promise<AsyncIterator<Character>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  player: <T = UserSubscription>() => T;
  isNonPlayable: () => Promise<AsyncIterator<Boolean>>;
  status: () => Promise<AsyncIterator<Status>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CharacterNullablePromise
  extends Promise<Character | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  player: <T = UserPromise>() => T;
  isNonPlayable: () => Promise<Boolean>;
  status: () => Promise<Status>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  role: UserRole[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  characters: <T = FragmentableArray<Character>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<UserRole[]>;
  manage: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  play: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  characters: <T = Promise<AsyncIterator<CharacterSubscription>>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AsyncIterator<UserRole[]>>;
  manage: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  play: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  characters: <T = FragmentableArray<Character>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<UserRole[]>;
  manage: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  play: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Character",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  },
  {
    name: "Status",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
