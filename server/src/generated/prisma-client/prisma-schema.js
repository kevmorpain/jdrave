module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCharacter {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Character {
  id: ID!
  name: String!
  player: User!
  isNonPlayable: Boolean!
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
}

type CharacterConnection {
  pageInfo: PageInfo!
  edges: [CharacterEdge]!
  aggregate: AggregateCharacter!
}

input CharacterCreateInput {
  id: ID
  name: String!
  player: UserCreateOneWithoutCharactersInput!
  isNonPlayable: Boolean
  status: Status
  games: GameCreateManyWithoutCharactersInput
}

input CharacterCreateManyWithoutGamesInput {
  create: [CharacterCreateWithoutGamesInput!]
  connect: [CharacterWhereUniqueInput!]
}

input CharacterCreateManyWithoutPlayerInput {
  create: [CharacterCreateWithoutPlayerInput!]
  connect: [CharacterWhereUniqueInput!]
}

input CharacterCreateWithoutGamesInput {
  id: ID
  name: String!
  player: UserCreateOneWithoutCharactersInput!
  isNonPlayable: Boolean
  status: Status
}

input CharacterCreateWithoutPlayerInput {
  id: ID
  name: String!
  isNonPlayable: Boolean
  status: Status
  games: GameCreateManyWithoutCharactersInput
}

type CharacterEdge {
  node: Character!
  cursor: String!
}

enum CharacterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  isNonPlayable_ASC
  isNonPlayable_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CharacterPreviousValues {
  id: ID!
  name: String!
  isNonPlayable: Boolean!
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CharacterScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isNonPlayable: Boolean
  isNonPlayable_not: Boolean
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CharacterScalarWhereInput!]
  OR: [CharacterScalarWhereInput!]
  NOT: [CharacterScalarWhereInput!]
}

type CharacterSubscriptionPayload {
  mutation: MutationType!
  node: Character
  updatedFields: [String!]
  previousValues: CharacterPreviousValues
}

input CharacterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CharacterWhereInput
  AND: [CharacterSubscriptionWhereInput!]
  OR: [CharacterSubscriptionWhereInput!]
  NOT: [CharacterSubscriptionWhereInput!]
}

input CharacterUpdateInput {
  name: String
  player: UserUpdateOneRequiredWithoutCharactersInput
  isNonPlayable: Boolean
  status: Status
  games: GameUpdateManyWithoutCharactersInput
}

input CharacterUpdateManyDataInput {
  name: String
  isNonPlayable: Boolean
  status: Status
}

input CharacterUpdateManyMutationInput {
  name: String
  isNonPlayable: Boolean
  status: Status
}

input CharacterUpdateManyWithoutGamesInput {
  create: [CharacterCreateWithoutGamesInput!]
  delete: [CharacterWhereUniqueInput!]
  connect: [CharacterWhereUniqueInput!]
  set: [CharacterWhereUniqueInput!]
  disconnect: [CharacterWhereUniqueInput!]
  update: [CharacterUpdateWithWhereUniqueWithoutGamesInput!]
  upsert: [CharacterUpsertWithWhereUniqueWithoutGamesInput!]
  deleteMany: [CharacterScalarWhereInput!]
  updateMany: [CharacterUpdateManyWithWhereNestedInput!]
}

input CharacterUpdateManyWithoutPlayerInput {
  create: [CharacterCreateWithoutPlayerInput!]
  delete: [CharacterWhereUniqueInput!]
  connect: [CharacterWhereUniqueInput!]
  set: [CharacterWhereUniqueInput!]
  disconnect: [CharacterWhereUniqueInput!]
  update: [CharacterUpdateWithWhereUniqueWithoutPlayerInput!]
  upsert: [CharacterUpsertWithWhereUniqueWithoutPlayerInput!]
  deleteMany: [CharacterScalarWhereInput!]
  updateMany: [CharacterUpdateManyWithWhereNestedInput!]
}

input CharacterUpdateManyWithWhereNestedInput {
  where: CharacterScalarWhereInput!
  data: CharacterUpdateManyDataInput!
}

input CharacterUpdateWithoutGamesDataInput {
  name: String
  player: UserUpdateOneRequiredWithoutCharactersInput
  isNonPlayable: Boolean
  status: Status
}

input CharacterUpdateWithoutPlayerDataInput {
  name: String
  isNonPlayable: Boolean
  status: Status
  games: GameUpdateManyWithoutCharactersInput
}

input CharacterUpdateWithWhereUniqueWithoutGamesInput {
  where: CharacterWhereUniqueInput!
  data: CharacterUpdateWithoutGamesDataInput!
}

input CharacterUpdateWithWhereUniqueWithoutPlayerInput {
  where: CharacterWhereUniqueInput!
  data: CharacterUpdateWithoutPlayerDataInput!
}

input CharacterUpsertWithWhereUniqueWithoutGamesInput {
  where: CharacterWhereUniqueInput!
  update: CharacterUpdateWithoutGamesDataInput!
  create: CharacterCreateWithoutGamesInput!
}

input CharacterUpsertWithWhereUniqueWithoutPlayerInput {
  where: CharacterWhereUniqueInput!
  update: CharacterUpdateWithoutPlayerDataInput!
  create: CharacterCreateWithoutPlayerInput!
}

input CharacterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  player: UserWhereInput
  isNonPlayable: Boolean
  isNonPlayable_not: Boolean
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
  AND: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  NOT: [CharacterWhereInput!]
}

input CharacterWhereUniqueInput {
  id: ID
}

scalar DateTime

type Game {
  id: ID!
  title: String!
  description: String
  gameMaster: User!
  players(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character!]
  createdAt: DateTime!
  updatedAt: DateTime!
  lastGameAt: DateTime
  status: Status!
}

type GameConnection {
  pageInfo: PageInfo!
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  id: ID
  title: String!
  description: String
  gameMaster: UserCreateOneWithoutManageInput!
  players: UserCreateManyWithoutPlayInput
  characters: CharacterCreateManyWithoutGamesInput
  lastGameAt: DateTime
  status: Status
}

input GameCreateManyWithoutCharactersInput {
  create: [GameCreateWithoutCharactersInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateManyWithoutGameMasterInput {
  create: [GameCreateWithoutGameMasterInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateManyWithoutPlayersInput {
  create: [GameCreateWithoutPlayersInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateWithoutCharactersInput {
  id: ID
  title: String!
  description: String
  gameMaster: UserCreateOneWithoutManageInput!
  players: UserCreateManyWithoutPlayInput
  lastGameAt: DateTime
  status: Status
}

input GameCreateWithoutGameMasterInput {
  id: ID
  title: String!
  description: String
  players: UserCreateManyWithoutPlayInput
  characters: CharacterCreateManyWithoutGamesInput
  lastGameAt: DateTime
  status: Status
}

input GameCreateWithoutPlayersInput {
  id: ID
  title: String!
  description: String
  gameMaster: UserCreateOneWithoutManageInput!
  characters: CharacterCreateManyWithoutGamesInput
  lastGameAt: DateTime
  status: Status
}

type GameEdge {
  node: Game!
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  lastGameAt_ASC
  lastGameAt_DESC
  status_ASC
  status_DESC
}

type GamePreviousValues {
  id: ID!
  title: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  lastGameAt: DateTime
  status: Status!
}

input GameScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  lastGameAt: DateTime
  lastGameAt_not: DateTime
  lastGameAt_in: [DateTime!]
  lastGameAt_not_in: [DateTime!]
  lastGameAt_lt: DateTime
  lastGameAt_lte: DateTime
  lastGameAt_gt: DateTime
  lastGameAt_gte: DateTime
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  AND: [GameScalarWhereInput!]
  OR: [GameScalarWhereInput!]
  NOT: [GameScalarWhereInput!]
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameWhereInput
  AND: [GameSubscriptionWhereInput!]
  OR: [GameSubscriptionWhereInput!]
  NOT: [GameSubscriptionWhereInput!]
}

input GameUpdateInput {
  title: String
  description: String
  gameMaster: UserUpdateOneRequiredWithoutManageInput
  players: UserUpdateManyWithoutPlayInput
  characters: CharacterUpdateManyWithoutGamesInput
  lastGameAt: DateTime
  status: Status
}

input GameUpdateManyDataInput {
  title: String
  description: String
  lastGameAt: DateTime
  status: Status
}

input GameUpdateManyMutationInput {
  title: String
  description: String
  lastGameAt: DateTime
  status: Status
}

input GameUpdateManyWithoutCharactersInput {
  create: [GameCreateWithoutCharactersInput!]
  delete: [GameWhereUniqueInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutCharactersInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutCharactersInput!]
  deleteMany: [GameScalarWhereInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
}

input GameUpdateManyWithoutGameMasterInput {
  create: [GameCreateWithoutGameMasterInput!]
  delete: [GameWhereUniqueInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutGameMasterInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutGameMasterInput!]
  deleteMany: [GameScalarWhereInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
}

input GameUpdateManyWithoutPlayersInput {
  create: [GameCreateWithoutPlayersInput!]
  delete: [GameWhereUniqueInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutPlayersInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutPlayersInput!]
  deleteMany: [GameScalarWhereInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
}

input GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput!
  data: GameUpdateManyDataInput!
}

input GameUpdateWithoutCharactersDataInput {
  title: String
  description: String
  gameMaster: UserUpdateOneRequiredWithoutManageInput
  players: UserUpdateManyWithoutPlayInput
  lastGameAt: DateTime
  status: Status
}

input GameUpdateWithoutGameMasterDataInput {
  title: String
  description: String
  players: UserUpdateManyWithoutPlayInput
  characters: CharacterUpdateManyWithoutGamesInput
  lastGameAt: DateTime
  status: Status
}

input GameUpdateWithoutPlayersDataInput {
  title: String
  description: String
  gameMaster: UserUpdateOneRequiredWithoutManageInput
  characters: CharacterUpdateManyWithoutGamesInput
  lastGameAt: DateTime
  status: Status
}

input GameUpdateWithWhereUniqueWithoutCharactersInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutCharactersDataInput!
}

input GameUpdateWithWhereUniqueWithoutGameMasterInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutGameMasterDataInput!
}

input GameUpdateWithWhereUniqueWithoutPlayersInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutPlayersDataInput!
}

input GameUpsertWithWhereUniqueWithoutCharactersInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutCharactersDataInput!
  create: GameCreateWithoutCharactersInput!
}

input GameUpsertWithWhereUniqueWithoutGameMasterInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutGameMasterDataInput!
  create: GameCreateWithoutGameMasterInput!
}

input GameUpsertWithWhereUniqueWithoutPlayersInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutPlayersDataInput!
  create: GameCreateWithoutPlayersInput!
}

input GameWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  gameMaster: UserWhereInput
  players_every: UserWhereInput
  players_some: UserWhereInput
  players_none: UserWhereInput
  characters_every: CharacterWhereInput
  characters_some: CharacterWhereInput
  characters_none: CharacterWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  lastGameAt: DateTime
  lastGameAt_not: DateTime
  lastGameAt_in: [DateTime!]
  lastGameAt_not_in: [DateTime!]
  lastGameAt_lt: DateTime
  lastGameAt_lte: DateTime
  lastGameAt_gt: DateTime
  lastGameAt_gte: DateTime
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
}

input GameWhereUniqueInput {
  id: ID
  title: String
}

scalar Long

type Mutation {
  createCharacter(data: CharacterCreateInput!): Character!
  updateCharacter(data: CharacterUpdateInput!, where: CharacterWhereUniqueInput!): Character
  updateManyCharacters(data: CharacterUpdateManyMutationInput!, where: CharacterWhereInput): BatchPayload!
  upsertCharacter(where: CharacterWhereUniqueInput!, create: CharacterCreateInput!, update: CharacterUpdateInput!): Character!
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteManyCharacters(where: CharacterWhereInput): BatchPayload!
  createGame(data: GameCreateInput!): Game!
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteManyGames(where: GameWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  character(where: CharacterWhereUniqueInput!): Character
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character]!
  charactersConnection(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharacterConnection!
  game(where: GameWhereUniqueInput!): Game
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type Subscription {
  character(where: CharacterSubscriptionWhereInput): CharacterSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character!]
  role: [UserRole!]!
  manage(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  play(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  characters: CharacterCreateManyWithoutPlayerInput
  role: UserCreateroleInput
  manage: GameCreateManyWithoutGameMasterInput
  play: GameCreateManyWithoutPlayersInput
}

input UserCreateManyWithoutPlayInput {
  create: [UserCreateWithoutPlayInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCharactersInput {
  create: UserCreateWithoutCharactersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutManageInput {
  create: UserCreateWithoutManageInput
  connect: UserWhereUniqueInput
}

input UserCreateroleInput {
  set: [UserRole!]
}

input UserCreateWithoutCharactersInput {
  id: ID
  name: String!
  email: String!
  password: String!
  role: UserCreateroleInput
  manage: GameCreateManyWithoutGameMasterInput
  play: GameCreateManyWithoutPlayersInput
}

input UserCreateWithoutManageInput {
  id: ID
  name: String!
  email: String!
  password: String!
  characters: CharacterCreateManyWithoutPlayerInput
  role: UserCreateroleInput
  play: GameCreateManyWithoutPlayersInput
}

input UserCreateWithoutPlayInput {
  id: ID
  name: String!
  email: String!
  password: String!
  characters: CharacterCreateManyWithoutPlayerInput
  role: UserCreateroleInput
  manage: GameCreateManyWithoutGameMasterInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: [UserRole!]!
}

enum UserRole {
  Admin
  Player
  GameMaster
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  characters: CharacterUpdateManyWithoutPlayerInput
  role: UserUpdateroleInput
  manage: GameUpdateManyWithoutGameMasterInput
  play: GameUpdateManyWithoutPlayersInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
  role: UserUpdateroleInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  role: UserUpdateroleInput
}

input UserUpdateManyWithoutPlayInput {
  create: [UserCreateWithoutPlayInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPlayInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPlayInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCharactersInput {
  create: UserCreateWithoutCharactersInput
  update: UserUpdateWithoutCharactersDataInput
  upsert: UserUpsertWithoutCharactersInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutManageInput {
  create: UserCreateWithoutManageInput
  update: UserUpdateWithoutManageDataInput
  upsert: UserUpsertWithoutManageInput
  connect: UserWhereUniqueInput
}

input UserUpdateroleInput {
  set: [UserRole!]
}

input UserUpdateWithoutCharactersDataInput {
  name: String
  email: String
  password: String
  role: UserUpdateroleInput
  manage: GameUpdateManyWithoutGameMasterInput
  play: GameUpdateManyWithoutPlayersInput
}

input UserUpdateWithoutManageDataInput {
  name: String
  email: String
  password: String
  characters: CharacterUpdateManyWithoutPlayerInput
  role: UserUpdateroleInput
  play: GameUpdateManyWithoutPlayersInput
}

input UserUpdateWithoutPlayDataInput {
  name: String
  email: String
  password: String
  characters: CharacterUpdateManyWithoutPlayerInput
  role: UserUpdateroleInput
  manage: GameUpdateManyWithoutGameMasterInput
}

input UserUpdateWithWhereUniqueWithoutPlayInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPlayDataInput!
}

input UserUpsertWithoutCharactersInput {
  update: UserUpdateWithoutCharactersDataInput!
  create: UserCreateWithoutCharactersInput!
}

input UserUpsertWithoutManageInput {
  update: UserUpdateWithoutManageDataInput!
  create: UserCreateWithoutManageInput!
}

input UserUpsertWithWhereUniqueWithoutPlayInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPlayDataInput!
  create: UserCreateWithoutPlayInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  characters_every: CharacterWhereInput
  characters_some: CharacterWhereInput
  characters_none: CharacterWhereInput
  manage_every: GameWhereInput
  manage_some: GameWhereInput
  manage_none: GameWhereInput
  play_every: GameWhereInput
  play_some: GameWhereInput
  play_none: GameWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    